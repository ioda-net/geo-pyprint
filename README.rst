.. contents::


The goal of this service is to transform a print request containing the layers
(in whatever format they are: WMTS, WMS, KML, …) and additional information of
various type like date, QR code, … to a document in a given output format, most
likely PDF. The service must support the web api of `MapFish Print v3
<http://mapfish.github.io/mapfish-print-doc/api.html>`__.

The service must be able to use a template created by the user to generate the
final document. This template must be in a form that is easy to edit and fast to
process for the server.

For each type of layer we want to print, we need to be able to get an image
**with transparency**. We can then recombine the images with:

.. code:: python

   output = Image.new('RGBA', (1600, 532))
   for resp in images:
        img = Image.open(resp.raw).convert('RGBA')
        output = Image.alpha_composite(output, img)

and saved with:

.. code:: python

    output.save('result.png', 'PNG')
    my_map = BytesIO()
    output.save(my_map, 'PNG')


Server Configuration
====================

- wsgi only?
- Allow fast cgi?


Image layers
============

All requests are constructed with `OWSLib
<https://geopython.github.io/OWSLib>`__.

WMS
---

Get the image with ``img = wms.getmap``.

Problems to handle
~~~~~~~~~~~~~~~~~~

- If the requested image is too big for the WMS server (mostly for external
  WMS).

WMTS
----

Get the images with ``tile = wmts.gettile``.

Problems to handle
~~~~~~~~~~~~~~~~~~

- How to we determine which tiles to get?
- How do we recombine the tiles?
- The images of recombined tiles is likely to be too big. How do we crop it
  correctly?


Vector Layers
=============

WFS
---

- Can we get images directly with the protocol?
- If not, how do we get the vector and then how do we convert the vector to an
  image?

KML/Geojson
-----------

OGR formats can be converted to an image with `mapnik
<http://mapnik.org/>`__. See `this question on stackoverflow
<http://stackoverflow.com/questions/3568458/programmatically-converting-kml-to-image>`__
for an example.


Protected layers
================

Referer
-------

Some layers require a specific value in the referer to be printed (WMTS layers
for Swisstopo for instance). We should be able to forward some/all headers of a
print request to the WMS/WMTS servers.

- Do we have the possibility to filter out some headers (except host which must
  be removed)?
- Do we have the possibility to do that only for some domains?

Basic auth
----------

- Do we send credentials to the server which forwards them to the WMS/WMTS
  server? If so how do we send them?


Protected Print Server
======================

Basic auth
----------

The print server must be on the same domain as the WMS/WMTS server. This way,
the browser will automatically forward the ``Authentication`` header to the
print server.


Templating
==========

The user must also be able to dynamically add various element to it:

- static image files
- images from a URL
- text
- merge with another PDF (for instance to get the legend of a map, if the legend
  is pre-generated and in a PDF format).
- use conditions to print an element or not.

Possible solutions:

- ODT files with Jinja2 markup generated by `Secretary
  <https://github.com/christopher-ramirez/secretary>`__. The odt must then be
  converted on the fly on the server by libre office to PDF.

  - **Advantages**

    - Powerful: anything that can be done in LibreOffice (tables, images,
      styles, …) and Jinja2 (loops, conditions, formatting, …)
    - Extensible: we can add our own filters/formatters.
    - Easy: the user can edit the template from a good WYSIWYG interface he/she
      probably already know.

 - **Disadvantages**

   - Probably slow
   - Requires LibreOffice on the server.

- PDF templates with the relevant values replaced on the fly on the server. How to we handle
  multiple pages? For instance, the legend doesn't fit on one page. How do we
  detect it and print it on more than one page.

- Write the document in a light markup language (rst, markdown, …), use Jinja2
  or Mako to generate the full document, then convert it to PDF (``rst2pdf``).

  - **Advantages**

    - Can be easier to edit than HTML
    - Should be quite fast
    - With the good markup languages, as powerful as HTML
    - RST can do really go PDF with LaTeX but it requires LaTeX on the server.

  - **Disadvantages**

    - Not as easy as WYSIWYG
    - Can be hard to find resources


Questions
=========

- Limit max number of request: globally, per domain?
- Which output formats besides PDF should be supported?

General Problems
----------------

- Response with a non 200 status code:

  - Print failure?
  - Use a transparent layer?


Appendix
========

PDF libraries for Python
------------------------

- `ReportLab <http://www.reportlab.com/opensource/>`__: PDF library for
  generating reports. More or less the Python equivalent of
  JasperReport. Recommended and used by many other project as a PDF engine. Also
  comes in a proprietary version which is claimed to be faster and have support
  for XML based templates.
- `PDFJinja <https://github.com/rammie/pdfjinja/>`__: use PDF template and
  jinja2 to render a final document. Rely on `pdftk
  <https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/>`__ to do the PDF
  rendering.
- `weasyprint >http://weasyprint.org/>`__: convert HTML/CSS to PDF with cairo.
- `pdfdocument <https://github.com/matthiask/pdfdocument>`__: wrapper around
  ReportLab to make it easier to use.
- `xhtml2pdf <https://github.com/xhtml2pdf/xhtml2pdf>`__: convert HTML pages to
  PDF with ReportLab. Support of Python3 is experimental.
- `wkhtmltopdf <http://wkhtmltopdf.org/>`_: relies on QtWebKit to render the
  page.
